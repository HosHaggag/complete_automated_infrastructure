pipeline {


    // add GCP cloud agent to run the pipeline on

    agent any

    stages {

        
        stage('login to google cloud') {
            steps {
                withCredentials([file(credentialsId: 'gcp-secret', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) { 
                    sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
                    sh 'gcloud config set project gcp-iti-401020'
                    sh 'gcloud config set compute/zone us-central1-a'
                 }
            }
        }


         stage('Checkout') {
            steps {
                git (
                    branch: 'configuration',
                    credentialsId: 'github',
                    url: 'https://github.com/HosHaggag/complete_automated_infrastructure.git'
                    )
            }
        }

        stage('autunticate mongo') {
            steps {
                script {
                            sh 'sudo openssl rand -base64 741 | sudo tee mongodb/mongodb-keyfile'
                            sh 'sudo chmod 0400 mongodb/mongodb-keyfile'
                            
                    }
                }
            }
        

        stage('build and push mongo image') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-secret', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) { 
                        sh 'sudo docker build . -t us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mymongo -f mongodb/Dockerfile.mongo'
                        sh 'sudo docker build . -t us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mymongosidecar -f  mongodb/Dockerfile.sidecar'
                        sh 'gcloud auth print-access-token | sudo docker login -u oauth2accesstoken --password-stdin  us-central1-docker.pkg.dev'
                        sh 'sudo docker push us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mymongo'
                        sh 'sudo docker push us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mymongosidecar'
                        
                    }
                }
            }
        }

        stage('build and push node image') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-secret', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) { 
                        sh 'sudo docker build . -t us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mynode -f ./nodejs/Dockerfile'
                        sh 'gcloud auth print-access-token | sudo docker login -u oauth2accesstoken --password-stdin  us-central1-docker.pkg.dev'
                        sh 'sudo docker push us-central1-docker.pkg.dev/gcp-iti-401020/my-nodejs-repo/mynode'
                    }
                }
            }
        }

        stage('deploy mongo') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-secret', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) { 
                        sh 'gcloud container clusters get-credentials workload-cluster --region=us-east1 --project=gcp-iti-401020'
                        sh 'kubectl apply -f ./mongodb/storage-class.yaml'
                        sh 'kubectl apply -f ./mongodb/mongodb-key.yaml'
                        sh 'kubectl apply -f ./mongodb/rolebinding.yaml'
                        sh 'kubectl apply -f ./mongodb/mongo-statefulset.yaml'
                    }
                }
            }
        }

        stage('deploy node') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-secret', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) { 
                        sh 'gcloud container clusters get-credentials workload-cluster --region=us-east1 --project=gcp-iti-401020'
                        sh 'kubectl apply -f ./nodejs/deployment.yaml'
                        sh 'kubectl apply -f ./nodejs/laod-balancer.yaml'
                    }
                }
            }
        }

    }
}
